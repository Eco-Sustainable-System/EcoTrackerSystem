const mongoose = require("mongoose");
const { ObjectId } = mongoose.Schema.Types;
function generateRandomId() {
  return Math.floor(1000000000 + Math.random() * 9000000000).toString();
}
const userSschema = new mongoose.Schema(
  {
    firstName: { type: String },
    lastName: { type: String },
    email: { type: String, unique: true },
    password: { type: String },
    picture: { type: String },
    profileImage: {
      type: String,
    },
    role: {
      type: String,
      enum: ["individual", "admin"],
      default: "individual",
    },
    goals: [
      // Array of Goal IDs created by the user
      { type: ObjectId, ref: "Goals" },
    ],
    badges: [String],
    CO2Reduction: { type: Number, default: 0 }, // Cumulative CO2 reduction
    ecoActions: [{ type: String, default: [] }], // Log of eco-friendly actions
    points: {
      // Total points earned by the user
      type: Number,
      default: 0,
    },
    totalEnergyGenerated: {
      // Total kinetic energy generated by the user (in kWh)
      type: Number,
      default: 0,
    },

    totalCO2Reduction: {
      // Total CO2 reduction based on energy generated
      type: Number,
      default: 0,
    },
    currentChallenges: [
      // Array of Challenge IDs the user is participating in
      { type: ObjectId, ref: "Challenges" },
    ],
    completedChallenges: [
      // Challenges the user has completed
      { type: ObjectId, ref: "Challenges" },
    ],
    activityLog: [
      // Array of Activity Log IDs for user's actions
      { type: ObjectId, ref: "ActivityLog" },
    ],
    reminders: [
      // Custom reminders set by the user for motivation
      { type: String },
    ],
    googleId: {
      type: String,
      default: generateRandomId, // تعيين الديفولت باستخدام الدالة
    },
    bikes: [
      // Custom reminders set by the user for motivation
      { type: String },
    ],
    redeemedRewards: [
      // Array of Reward IDs the user has redeemed
      { type: ObjectId, ref: "Rewards" },
    ],
    savedEnergy: Number,
    followers: [{ type: ObjectId, ref: "User" },],
    posts: [{ type: ObjectId, ref: "Post" },],
    active: { type: Boolean, default: true },
  },
  { timestamps: true }
);

const User =
  mongoose.models.User || mongoose.model("User", userSschema, "Users");

export default User;